// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Represents the current server blacklist.
type Blacklist struct {
	Hashes               []string `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blacklist) Reset()         { *m = Blacklist{} }
func (m *Blacklist) String() string { return proto.CompactTextString(m) }
func (*Blacklist) ProtoMessage()    {}
func (*Blacklist) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_050d061dc2043499, []int{0}
}
func (m *Blacklist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blacklist.Unmarshal(m, b)
}
func (m *Blacklist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blacklist.Marshal(b, m, deterministic)
}
func (dst *Blacklist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blacklist.Merge(dst, src)
}
func (m *Blacklist) XXX_Size() int {
	return xxx_messageInfo_Blacklist.Size(m)
}
func (m *Blacklist) XXX_DiscardUnknown() {
	xxx_messageInfo_Blacklist.DiscardUnknown(m)
}

var xxx_messageInfo_Blacklist proto.InternalMessageInfo

func (m *Blacklist) GetHashes() []string {
	if m != nil {
		return m.Hashes
	}
	return nil
}

// *
// Represents a request which evaluates whether the passed hostnames or ip
// addresses match the server blacklist
type CheckBlacklistRequest struct {
	Addresses            []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBlacklistRequest) Reset()         { *m = CheckBlacklistRequest{} }
func (m *CheckBlacklistRequest) String() string { return proto.CompactTextString(m) }
func (*CheckBlacklistRequest) ProtoMessage()    {}
func (*CheckBlacklistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_050d061dc2043499, []int{1}
}
func (m *CheckBlacklistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckBlacklistRequest.Unmarshal(m, b)
}
func (m *CheckBlacklistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckBlacklistRequest.Marshal(b, m, deterministic)
}
func (dst *CheckBlacklistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBlacklistRequest.Merge(dst, src)
}
func (m *CheckBlacklistRequest) XXX_Size() int {
	return xxx_messageInfo_CheckBlacklistRequest.Size(m)
}
func (m *CheckBlacklistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBlacklistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBlacklistRequest proto.InternalMessageInfo

func (m *CheckBlacklistRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// *
// represents a response to a prior blacklist check
type CheckBlacklistResponse struct {
	MatchedAddresses     []string `protobuf:"bytes,1,rep,name=matchedAddresses,proto3" json:"matchedAddresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBlacklistResponse) Reset()         { *m = CheckBlacklistResponse{} }
func (m *CheckBlacklistResponse) String() string { return proto.CompactTextString(m) }
func (*CheckBlacklistResponse) ProtoMessage()    {}
func (*CheckBlacklistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_050d061dc2043499, []int{2}
}
func (m *CheckBlacklistResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckBlacklistResponse.Unmarshal(m, b)
}
func (m *CheckBlacklistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckBlacklistResponse.Marshal(b, m, deterministic)
}
func (dst *CheckBlacklistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBlacklistResponse.Merge(dst, src)
}
func (m *CheckBlacklistResponse) XXX_Size() int {
	return xxx_messageInfo_CheckBlacklistResponse.Size(m)
}
func (m *CheckBlacklistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBlacklistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBlacklistResponse proto.InternalMessageInfo

func (m *CheckBlacklistResponse) GetMatchedAddresses() []string {
	if m != nil {
		return m.MatchedAddresses
	}
	return nil
}

type LoginRequest struct {
	DisplayName          string   `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	ServerId             string   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_050d061dc2043499, []int{3}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (dst *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(dst, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LoginRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *LoginRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*Blacklist)(nil), "rpc.Blacklist")
	proto.RegisterType((*CheckBlacklistRequest)(nil), "rpc.CheckBlacklistRequest")
	proto.RegisterType((*CheckBlacklistResponse)(nil), "rpc.CheckBlacklistResponse")
	proto.RegisterType((*LoginRequest)(nil), "rpc.LoginRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerServiceClient interface {
	// *
	// Retrieves a cached version of the entire server blacklist.
	GetBlacklist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Blacklist, error)
	// *
	// Evaluates whether a given address has been blacklisted.
	//
	// This method accepts both IP v4 addresses and regular hostnames.
	CheckBlacklist(ctx context.Context, in *CheckBlacklistRequest, opts ...grpc.CallOption) (*CheckBlacklistResponse, error)
	// *
	// Performs a cache assisted login (e.g. when a player joins).
	//
	// The player profile will automatically be placed inside the cache storage
	// backend when this method is invoked and will thus greatly reduce the
	// latency of succeeding requests.
	//
	// Logins do not count towards the API rate limit.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Profile, error)
}

type serverServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerServiceClient(cc *grpc.ClientConn) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) GetBlacklist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Blacklist, error) {
	out := new(Blacklist)
	err := c.cc.Invoke(ctx, "/rpc.ServerService/GetBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CheckBlacklist(ctx context.Context, in *CheckBlacklistRequest, opts ...grpc.CallOption) (*CheckBlacklistResponse, error) {
	out := new(CheckBlacklistResponse)
	err := c.cc.Invoke(ctx, "/rpc.ServerService/CheckBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/rpc.ServerService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
type ServerServiceServer interface {
	// *
	// Retrieves a cached version of the entire server blacklist.
	GetBlacklist(context.Context, *empty.Empty) (*Blacklist, error)
	// *
	// Evaluates whether a given address has been blacklisted.
	//
	// This method accepts both IP v4 addresses and regular hostnames.
	CheckBlacklist(context.Context, *CheckBlacklistRequest) (*CheckBlacklistResponse, error)
	// *
	// Performs a cache assisted login (e.g. when a player joins).
	//
	// The player profile will automatically be placed inside the cache storage
	// backend when this method is invoked and will thus greatly reduce the
	// latency of succeeding requests.
	//
	// Logins do not count towards the API rate limit.
	Login(context.Context, *LoginRequest) (*Profile, error)
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ServerService/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetBlacklist(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CheckBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CheckBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ServerService/CheckBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CheckBlacklist(ctx, req.(*CheckBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ServerService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlacklist",
			Handler:    _ServerService_GetBlacklist_Handler,
		},
		{
			MethodName: "CheckBlacklist",
			Handler:    _ServerService_CheckBlacklist_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ServerService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_050d061dc2043499) }

var fileDescriptor_server_050d061dc2043499 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xe9, 0x86, 0xc3, 0x3e, 0xeb, 0xd0, 0x80, 0xa3, 0x64, 0x1e, 0x4a, 0xbd, 0x0c, 0x0f,
	0x19, 0x28, 0x7a, 0x77, 0x2a, 0x32, 0x10, 0x91, 0x79, 0xf5, 0x92, 0xa5, 0x6f, 0x6d, 0x58, 0xbb,
	0xc4, 0x24, 0x13, 0xf6, 0xbf, 0xf9, 0xc7, 0xc9, 0xd2, 0xfd, 0x72, 0xee, 0x52, 0x78, 0xdf, 0xf7,
	0x79, 0x34, 0xdf, 0x0f, 0x44, 0x16, 0xcd, 0x37, 0x1a, 0xa6, 0x8d, 0x72, 0x8a, 0x34, 0x8d, 0x16,
	0xb4, 0x9b, 0x2b, 0x95, 0x97, 0xd8, 0xf7, 0xd1, 0x78, 0x3e, 0xe9, 0x63, 0xa5, 0xdd, 0xa2, 0x26,
	0x68, 0x24, 0x54, 0x55, 0xa9, 0x59, 0x3d, 0xa5, 0x57, 0x10, 0x0e, 0x4a, 0x2e, 0xa6, 0xa5, 0xb4,
	0x8e, 0x74, 0xa0, 0x55, 0x70, 0x5b, 0xa0, 0x8d, 0x83, 0xa4, 0xd9, 0x0b, 0x47, 0xab, 0x29, 0xbd,
	0x83, 0x8b, 0xc7, 0x02, 0xc5, 0x74, 0x43, 0x8e, 0xf0, 0x6b, 0x8e, 0xd6, 0x91, 0x4b, 0x08, 0x79,
	0x96, 0x19, 0xb4, 0x76, 0x73, 0xb3, 0x0d, 0xd2, 0x27, 0xe8, 0xec, 0x9f, 0x59, 0xad, 0x66, 0x16,
	0xc9, 0x35, 0x9c, 0x55, 0xdc, 0x89, 0x02, 0xb3, 0x87, 0xbd, 0xf3, 0x7f, 0x79, 0xfa, 0x09, 0xd1,
	0xab, 0xca, 0xe5, 0x6c, 0xfd, 0xcf, 0x04, 0x4e, 0x32, 0x69, 0x75, 0xc9, 0x17, 0x6f, 0xbc, 0xc2,
	0x38, 0x48, 0x82, 0x5e, 0x38, 0xda, 0x8d, 0x08, 0x85, 0xe3, 0xda, 0xc9, 0x30, 0x8b, 0x1b, 0x7e,
	0xbd, 0x99, 0x49, 0x1b, 0x1a, 0x52, 0xc7, 0x4d, 0x9f, 0x36, 0xa4, 0xbe, 0xf9, 0x09, 0xe0, 0xf4,
	0xc3, 0x2f, 0x97, 0x5f, 0x29, 0x90, 0xdc, 0x43, 0xf4, 0x82, 0x6e, 0x47, 0x0a, 0xab, 0x6d, 0xb2,
	0xb5, 0x4d, 0xf6, 0xbc, 0xb4, 0x49, 0xdb, 0xcc, 0x68, 0xc1, 0xb6, 0xdc, 0x10, 0xda, 0x7f, 0xdb,
	0x12, 0xea, 0x89, 0x83, 0xe6, 0x68, 0xf7, 0xe0, 0x6e, 0xa5, 0xa7, 0x07, 0x47, 0xbe, 0x32, 0x39,
	0xf7, 0xd4, 0x6e, 0x7d, 0x1a, 0xf9, 0xe8, 0xdd, 0xa8, 0x89, 0x2c, 0x71, 0x90, 0x42, 0x22, 0x15,
	0xcb, 0xa5, 0x2b, 0xe6, 0x63, 0x96, 0x29, 0x67, 0x1d, 0x37, 0x8e, 0x59, 0xa7, 0xc4, 0x54, 0xcb,
	0x12, 0x97, 0xec, 0xb8, 0xe5, 0x1f, 0x7e, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x23, 0x33,
	0xc8, 0x29, 0x02, 0x00, 0x00,
}
