// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Status struct {
	Brand          string `protobuf:"bytes,1,opt,name=Brand,json=brand" json:"Brand,omitempty"`
	Version        string `protobuf:"bytes,2,opt,name=Version,json=version" json:"Version,omitempty"`
	VersionFull    string `protobuf:"bytes,3,opt,name=VersionFull,json=versionFull" json:"VersionFull,omitempty"`
	CommitHash     string `protobuf:"bytes,4,opt,name=CommitHash,json=commitHash" json:"CommitHash,omitempty"`
	BuildTimestamp int64  `protobuf:"varint,5,opt,name=BuildTimestamp,json=buildTimestamp" json:"BuildTimestamp,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Status) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Status) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Status) GetVersionFull() string {
	if m != nil {
		return m.VersionFull
	}
	return ""
}

func (m *Status) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *Status) GetBuildTimestamp() int64 {
	if m != nil {
		return m.BuildTimestamp
	}
	return 0
}

type PluginList struct {
	Plugins []*Plugin `protobuf:"bytes,1,rep,name=Plugins,json=plugins" json:"Plugins,omitempty"`
}

func (m *PluginList) Reset()                    { *m = PluginList{} }
func (m *PluginList) String() string            { return proto.CompactTextString(m) }
func (*PluginList) ProtoMessage()               {}
func (*PluginList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *PluginList) GetPlugins() []*Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type Plugin struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Version string   `protobuf:"bytes,2,opt,name=Version,json=version" json:"Version,omitempty"`
	Authors []string `protobuf:"bytes,3,rep,name=Authors,json=authors" json:"Authors,omitempty"`
	Website string   `protobuf:"bytes,4,opt,name=Website,json=website" json:"Website,omitempty"`
}

func (m *Plugin) Reset()                    { *m = Plugin{} }
func (m *Plugin) String() string            { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()               {}
func (*Plugin) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *Plugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plugin) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Plugin) GetAuthors() []string {
	if m != nil {
		return m.Authors
	}
	return nil
}

func (m *Plugin) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func init() {
	proto.RegisterType((*Status)(nil), "rpc.Status")
	proto.RegisterType((*PluginList)(nil), "rpc.PluginList")
	proto.RegisterType((*Plugin)(nil), "rpc.Plugin")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SystemService service

type SystemServiceClient interface {
	GetStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Status, error)
	GetPlugins(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*PluginList, error)
}

type systemServiceClient struct {
	cc *grpc.ClientConn
}

func NewSystemServiceClient(cc *grpc.ClientConn) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) GetStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/rpc.SystemService/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetPlugins(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*PluginList, error) {
	out := new(PluginList)
	err := grpc.Invoke(ctx, "/rpc.SystemService/GetPlugins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SystemService service

type SystemServiceServer interface {
	GetStatus(context.Context, *google_protobuf1.Empty) (*Status, error)
	GetPlugins(context.Context, *google_protobuf1.Empty) (*PluginList, error)
}

func RegisterSystemServiceServer(s *grpc.Server, srv SystemServiceServer) {
	s.RegisterService(&_SystemService_serviceDesc, srv)
}

func _SystemService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SystemService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetStatus(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SystemService/GetPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetPlugins(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _SystemService_GetStatus_Handler,
		},
		{
			MethodName: "GetPlugins",
			Handler:    _SystemService_GetPlugins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

func init() { proto.RegisterFile("system.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x5f, 0x4b, 0xf3, 0x30,
	0x18, 0xc5, 0xe9, 0xdb, 0x6d, 0x65, 0x4f, 0x5f, 0x27, 0x04, 0x91, 0x30, 0x41, 0x4a, 0x41, 0xd9,
	0x55, 0x26, 0x1b, 0x7e, 0x00, 0x27, 0x3a, 0x2f, 0x44, 0x64, 0x13, 0xbd, 0x4e, 0xbb, 0xd8, 0x45,
	0x9b, 0xa6, 0x24, 0x4f, 0xa7, 0xfb, 0x3a, 0x7e, 0x52, 0x69, 0x53, 0xff, 0x5d, 0xe8, 0xe5, 0xf9,
	0x9d, 0xd3, 0x92, 0xf3, 0x1c, 0xf8, 0x6f, 0xb7, 0x16, 0x85, 0x62, 0xa5, 0xd1, 0xa8, 0x89, 0x6f,
	0xca, 0x74, 0x78, 0x90, 0x69, 0x9d, 0xe5, 0x62, 0xdc, 0xa0, 0xa4, 0x7a, 0x1c, 0x0b, 0x55, 0xe2,
	0xd6, 0x25, 0xe2, 0x37, 0x0f, 0x7a, 0x4b, 0xe4, 0x58, 0x59, 0xb2, 0x07, 0xdd, 0x99, 0xe1, 0xc5,
	0x8a, 0x7a, 0x91, 0x37, 0xea, 0x2f, 0xba, 0x49, 0x2d, 0x08, 0x85, 0xe0, 0x5e, 0x18, 0x2b, 0x75,
	0x41, 0xff, 0x35, 0x3c, 0xd8, 0x38, 0x49, 0x22, 0x08, 0x5b, 0xe7, 0xb2, 0xca, 0x73, 0xea, 0x37,
	0x6e, 0xb8, 0xf9, 0x42, 0xe4, 0x10, 0xe0, 0x5c, 0x2b, 0x25, 0xf1, 0x8a, 0xdb, 0x35, 0xed, 0x34,
	0x01, 0x48, 0x3f, 0x09, 0x39, 0x86, 0xc1, 0xac, 0x92, 0xf9, 0xea, 0x4e, 0x2a, 0x61, 0x91, 0xab,
	0x92, 0x76, 0x23, 0x6f, 0xe4, 0x2f, 0x06, 0xc9, 0x0f, 0x1a, 0x4f, 0x01, 0x6e, 0xf3, 0x2a, 0x93,
	0xc5, 0xb5, 0xb4, 0x48, 0x8e, 0x20, 0x70, 0xca, 0x52, 0x2f, 0xf2, 0x47, 0xe1, 0x24, 0x64, 0xa6,
	0x4c, 0x99, 0x63, 0x8b, 0xa0, 0x74, 0x5e, 0xfc, 0x04, 0x3d, 0x87, 0x08, 0x81, 0xce, 0x0d, 0x57,
	0xa2, 0xed, 0xd5, 0x29, 0xb8, 0x12, 0x7f, 0xd4, 0xa2, 0x10, 0x9c, 0x55, 0xb8, 0xd6, 0xc6, 0x52,
	0x3f, 0xf2, 0x6b, 0x87, 0x3b, 0x59, 0x3b, 0x0f, 0x22, 0xb1, 0x12, 0x45, 0xdb, 0x25, 0x78, 0x71,
	0x72, 0xf2, 0x0a, 0x3b, 0xcb, 0xe6, 0xee, 0x4b, 0x61, 0x36, 0x32, 0x15, 0xe4, 0x04, 0xfa, 0x73,
	0x81, 0xed, 0x61, 0xf7, 0x99, 0x5b, 0x80, 0x7d, 0x2c, 0xc0, 0x2e, 0xea, 0x05, 0x86, 0xee, 0xdd,
	0x6d, 0xe8, 0x14, 0x60, 0x2e, 0xb0, 0x2d, 0xf6, 0xeb, 0x27, 0xbb, 0xdf, 0xaa, 0xd6, 0xc7, 0x98,
	0xc5, 0x10, 0x49, 0xcd, 0x32, 0x89, 0xeb, 0x2a, 0x61, 0x2b, 0x8d, 0x16, 0xb9, 0x41, 0x66, 0x51,
	0xa7, 0xcf, 0xa5, 0xcc, 0x45, 0x1d, 0x4f, 0x7a, 0xcd, 0x4f, 0xa6, 0xef, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x9d, 0x1a, 0x72, 0x8d, 0x1c, 0x02, 0x00, 0x00,
}
