// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_PROFILE_ID   EventType = 0
	EventType_NAME_HISTORY EventType = 1
	EventType_PROFILE      EventType = 2
	EventType_BLACKLIST    EventType = 3
)

var EventType_name = map[int32]string{
	0: "PROFILE_ID",
	1: "NAME_HISTORY",
	2: "PROFILE",
	3: "BLACKLIST",
}
var EventType_value = map[string]int32{
	"PROFILE_ID":   0,
	"NAME_HISTORY": 1,
	"PROFILE":      2,
	"BLACKLIST":    3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_events_7995d0535b215243, []int{0}
}

type EventAction int32

const (
	EventAction_POPULATED EventAction = 0
	EventAction_UPDATED   EventAction = 1
)

var EventAction_name = map[int32]string{
	0: "POPULATED",
	1: "UPDATED",
}
var EventAction_value = map[string]int32{
	"POPULATED": 0,
	"UPDATED":   1,
}

func (x EventAction) String() string {
	return proto.EnumName(EventAction_name, int32(x))
}
func (EventAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_events_7995d0535b215243, []int{1}
}

type Event struct {
	Type                 EventType   `protobuf:"varint,1,opt,name=type,proto3,enum=rpc.EventType" json:"type,omitempty"`
	Action               EventAction `protobuf:"varint,2,opt,name=action,proto3,enum=rpc.EventAction" json:"action,omitempty"`
	Key                  *any.Any    `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Object               *any.Any    `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7995d0535b215243, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_PROFILE_ID
}

func (m *Event) GetAction() EventAction {
	if m != nil {
		return m.Action
	}
	return EventAction_POPULATED
}

func (m *Event) GetKey() *any.Any {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Event) GetObject() *any.Any {
	if m != nil {
		return m.Object
	}
	return nil
}

type ProfileIdKey struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	At                   int64    `protobuf:"varint,2,opt,name=at,proto3" json:"at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileIdKey) Reset()         { *m = ProfileIdKey{} }
func (m *ProfileIdKey) String() string { return proto.CompactTextString(m) }
func (*ProfileIdKey) ProtoMessage()    {}
func (*ProfileIdKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7995d0535b215243, []int{1}
}
func (m *ProfileIdKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileIdKey.Unmarshal(m, b)
}
func (m *ProfileIdKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileIdKey.Marshal(b, m, deterministic)
}
func (dst *ProfileIdKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileIdKey.Merge(dst, src)
}
func (m *ProfileIdKey) XXX_Size() int {
	return xxx_messageInfo_ProfileIdKey.Size(m)
}
func (m *ProfileIdKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileIdKey.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileIdKey proto.InternalMessageInfo

func (m *ProfileIdKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileIdKey) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

type IdKey struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdKey) Reset()         { *m = IdKey{} }
func (m *IdKey) String() string { return proto.CompactTextString(m) }
func (*IdKey) ProtoMessage()    {}
func (*IdKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7995d0535b215243, []int{2}
}
func (m *IdKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdKey.Unmarshal(m, b)
}
func (m *IdKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdKey.Marshal(b, m, deterministic)
}
func (dst *IdKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdKey.Merge(dst, src)
}
func (m *IdKey) XXX_Size() int {
	return xxx_messageInfo_IdKey.Size(m)
}
func (m *IdKey) XXX_DiscardUnknown() {
	xxx_messageInfo_IdKey.DiscardUnknown(m)
}

var xxx_messageInfo_IdKey proto.InternalMessageInfo

func (m *IdKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "rpc.Event")
	proto.RegisterType((*ProfileIdKey)(nil), "rpc.ProfileIdKey")
	proto.RegisterType((*IdKey)(nil), "rpc.IdKey")
	proto.RegisterEnum("rpc.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("rpc.EventAction", EventAction_name, EventAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	StreamEvents(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventService_StreamEventsClient, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) StreamEvents(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[0], "/rpc.EventService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_StreamEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceStreamEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	StreamEvents(*empty.Empty, EventService_StreamEventsServer) error
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).StreamEvents(m, &eventServiceStreamEventsServer{stream})
}

type EventService_StreamEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceStreamEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor_events_7995d0535b215243) }

var fileDescriptor_events_7995d0535b215243 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcd, 0x6e, 0x9b, 0x40,
	0x14, 0x85, 0x0b, 0xf8, 0x47, 0xbe, 0x50, 0x84, 0x46, 0x6d, 0x4d, 0xdd, 0x8d, 0xc5, 0xa2, 0x72,
	0xad, 0x6a, 0x5c, 0xd1, 0xbe, 0x00, 0xae, 0x89, 0x82, 0x4c, 0x62, 0x04, 0x78, 0x91, 0x95, 0x85,
	0x61, 0x6c, 0x11, 0xdb, 0x0c, 0x82, 0x89, 0x25, 0x9e, 0x29, 0x2f, 0x19, 0x31, 0x90, 0x38, 0x4a,
	0xa4, 0xec, 0xe0, 0x7e, 0xdf, 0x5c, 0x9d, 0x39, 0x03, 0x0a, 0x39, 0x93, 0x8c, 0x95, 0x38, 0x2f,
	0x28, 0xa3, 0x48, 0x2a, 0xf2, 0x78, 0xf4, 0x7d, 0x4f, 0xe9, 0xfe, 0x48, 0x66, 0x7c, 0xb4, 0x7d,
	0xd8, 0xcd, 0xa2, 0xac, 0x6a, 0xf8, 0xe8, 0xc7, 0x5b, 0x44, 0x4e, 0x39, 0x6b, 0xa1, 0xf1, 0x28,
	0x40, 0xd7, 0xae, 0xb7, 0x21, 0x03, 0x3a, 0xac, 0xca, 0x89, 0x2e, 0x8c, 0x85, 0x89, 0x6a, 0xaa,
	0xb8, 0xc8, 0x63, 0xcc, 0x49, 0x58, 0xe5, 0xc4, 0xe7, 0x0c, 0x4d, 0xa0, 0x17, 0xc5, 0x2c, 0xa5,
	0x99, 0x2e, 0x72, 0x4b, 0xbb, 0x58, 0x16, 0x9f, 0xfb, 0x2d, 0x47, 0x3f, 0x41, 0x3a, 0x90, 0x4a,
	0x97, 0xc6, 0xc2, 0x44, 0x36, 0xbf, 0xe0, 0x26, 0x02, 0x7e, 0x8e, 0x80, 0xad, 0xac, 0xf2, 0x6b,
	0x01, 0xfd, 0x86, 0x1e, 0xdd, 0xde, 0x93, 0x98, 0xe9, 0x9d, 0x0f, 0xd4, 0xd6, 0x31, 0x4c, 0x50,
	0xbc, 0x82, 0xee, 0xd2, 0x23, 0x71, 0x92, 0x25, 0xa9, 0x10, 0x82, 0x4e, 0x16, 0x9d, 0x9a, 0xcc,
	0x03, 0x9f, 0x7f, 0x23, 0x15, 0xc4, 0x88, 0xf1, 0x7c, 0x92, 0x2f, 0x46, 0xcc, 0x18, 0x42, 0xb7,
	0x91, 0x55, 0x10, 0xd3, 0xa4, 0x55, 0xc5, 0x34, 0x99, 0x3a, 0x30, 0x78, 0xb9, 0x1f, 0x52, 0x01,
	0x3c, 0x7f, 0x75, 0xe5, 0xb8, 0xf6, 0xc6, 0x59, 0x68, 0x9f, 0x90, 0x06, 0xca, 0xad, 0x75, 0x63,
	0x6f, 0xae, 0x9d, 0x20, 0x5c, 0xf9, 0x77, 0x9a, 0x80, 0x64, 0xe8, 0xb7, 0x86, 0x26, 0xa2, 0xcf,
	0x30, 0x98, 0xbb, 0xd6, 0xff, 0xa5, 0xeb, 0x04, 0xa1, 0x26, 0x4d, 0x7f, 0x81, 0xfc, 0xaa, 0x84,
	0x9a, 0x7a, 0x2b, 0x6f, 0xed, 0x5a, 0xa1, 0x5d, 0xef, 0x92, 0xa1, 0xbf, 0xf6, 0x16, 0xfc, 0x47,
	0x30, 0x17, 0xa0, 0x70, 0x35, 0x20, 0xc5, 0x39, 0x8d, 0x09, 0xfa, 0x07, 0x4a, 0xc0, 0x0a, 0x12,
	0x9d, 0xf8, 0xb4, 0x44, 0xdf, 0xde, 0x15, 0x60, 0xd7, 0xcf, 0x35, 0x82, 0x4b, 0xd5, 0x7f, 0x84,
	0xf9, 0x10, 0xbe, 0xb2, 0x33, 0x4e, 0x28, 0x2b, 0x59, 0x54, 0x30, 0x5c, 0x32, 0x1a, 0x1f, 0xf2,
	0xf4, 0x48, 0xb6, 0x3d, 0x7e, 0xec, 0xef, 0x53, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xd2, 0xd8,
	0x3e, 0x23, 0x02, 0x00, 0x00,
}
