// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EventType int32

const (
	EventType_PROFILE_ID   EventType = 0
	EventType_NAME_HISTORY EventType = 1
	EventType_PROFILE      EventType = 2
	EventType_BLACKLIST    EventType = 3
)

var EventType_name = map[int32]string{
	0: "PROFILE_ID",
	1: "NAME_HISTORY",
	2: "PROFILE",
	3: "BLACKLIST",
}
var EventType_value = map[string]int32{
	"PROFILE_ID":   0,
	"NAME_HISTORY": 1,
	"PROFILE":      2,
	"BLACKLIST":    3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type EventAction int32

const (
	EventAction_POPULATED EventAction = 0
	EventAction_UPDATED   EventAction = 1
)

var EventAction_name = map[int32]string{
	0: "POPULATED",
	1: "UPDATED",
}
var EventAction_value = map[string]int32{
	"POPULATED": 0,
	"UPDATED":   1,
}

func (x EventAction) String() string {
	return proto.EnumName(EventAction_name, int32(x))
}
func (EventAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Event struct {
	Type   EventType            `protobuf:"varint,1,opt,name=type,enum=rpc.EventType" json:"type,omitempty"`
	Action EventAction          `protobuf:"varint,2,opt,name=action,enum=rpc.EventAction" json:"action,omitempty"`
	Key    *google_protobuf.Any `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Object *google_protobuf.Any `protobuf:"bytes,4,opt,name=object" json:"object,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_PROFILE_ID
}

func (m *Event) GetAction() EventAction {
	if m != nil {
		return m.Action
	}
	return EventAction_POPULATED
}

func (m *Event) GetKey() *google_protobuf.Any {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Event) GetObject() *google_protobuf.Any {
	if m != nil {
		return m.Object
	}
	return nil
}

type ProfileIdKey struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	At   int64  `protobuf:"varint,2,opt,name=at" json:"at,omitempty"`
}

func (m *ProfileIdKey) Reset()                    { *m = ProfileIdKey{} }
func (m *ProfileIdKey) String() string            { return proto.CompactTextString(m) }
func (*ProfileIdKey) ProtoMessage()               {}
func (*ProfileIdKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ProfileIdKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileIdKey) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

type IdKey struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdKey) Reset()                    { *m = IdKey{} }
func (m *IdKey) String() string            { return proto.CompactTextString(m) }
func (*IdKey) ProtoMessage()               {}
func (*IdKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *IdKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "rpc.Event")
	proto.RegisterType((*ProfileIdKey)(nil), "rpc.ProfileIdKey")
	proto.RegisterType((*IdKey)(nil), "rpc.IdKey")
	proto.RegisterEnum("rpc.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("rpc.EventAction", EventAction_name, EventAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	StreamEvents(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (EventService_StreamEventsClient, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) StreamEvents(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (EventService_StreamEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventService_serviceDesc.Streams[0], c.cc, "/rpc.EventService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_StreamEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceStreamEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventService service

type EventServiceServer interface {
	StreamEvents(*google_protobuf1.Empty, EventService_StreamEventsServer) error
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).StreamEvents(m, &eventServiceStreamEventsServer{stream})
}

type EventService_StreamEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceStreamEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x5d, 0xcf, 0x93, 0x30,
	0x18, 0x86, 0x05, 0xf6, 0x91, 0x3d, 0x20, 0x21, 0x8d, 0x51, 0x9c, 0x27, 0x0b, 0x07, 0x66, 0x2e,
	0xa6, 0x33, 0xe8, 0x1f, 0x60, 0x0e, 0x23, 0x19, 0x3a, 0x02, 0xec, 0xc0, 0xa3, 0x85, 0x8f, 0x6e,
	0xd6, 0x6d, 0x94, 0x40, 0xb7, 0x84, 0xdf, 0xe4, 0x9f, 0x34, 0x14, 0x74, 0xe6, 0x7d, 0x93, 0xf7,
	0xac, 0x7d, 0xae, 0x2b, 0x4f, 0xee, 0xde, 0x05, 0x8d, 0xdc, 0x48, 0xc1, 0x6b, 0x5c, 0x56, 0x8c,
	0x33, 0xa4, 0x54, 0x65, 0x36, 0x7d, 0x7d, 0x64, 0xec, 0x78, 0x26, 0x4b, 0x31, 0x4a, 0xaf, 0x87,
	0x65, 0x52, 0x34, 0x1d, 0x9f, 0xbe, 0x79, 0x88, 0xc8, 0xa5, 0xe4, 0x3d, 0xb4, 0x7e, 0x4b, 0x30,
	0x74, 0xdb, 0x6d, 0xc8, 0x82, 0x01, 0x6f, 0x4a, 0x62, 0x4a, 0x33, 0x69, 0xae, 0xdb, 0x3a, 0xae,
	0xca, 0x0c, 0x0b, 0x12, 0x37, 0x25, 0x09, 0x05, 0x43, 0x73, 0x18, 0x25, 0x19, 0xa7, 0xac, 0x30,
	0x65, 0x61, 0x19, 0x77, 0xcb, 0x11, 0xf3, 0xb0, 0xe7, 0xe8, 0x2d, 0x28, 0x27, 0xd2, 0x98, 0xca,
	0x4c, 0x9a, 0xab, 0xf6, 0x0b, 0xdc, 0x45, 0xc0, 0x7f, 0x23, 0x60, 0xa7, 0x68, 0xc2, 0x56, 0x40,
	0xef, 0x61, 0xc4, 0xd2, 0x5f, 0x24, 0xe3, 0xe6, 0xe0, 0x09, 0xb5, 0x77, 0x2c, 0x1b, 0xb4, 0xa0,
	0x62, 0x07, 0x7a, 0x26, 0x5e, 0xbe, 0x21, 0x0d, 0x42, 0x30, 0x28, 0x92, 0x4b, 0x97, 0x79, 0x12,
	0x8a, 0x33, 0xd2, 0x41, 0x4e, 0xb8, 0xc8, 0xa7, 0x84, 0x72, 0xc2, 0xad, 0x57, 0x30, 0xec, 0x64,
	0x1d, 0x64, 0x9a, 0xf7, 0xaa, 0x4c, 0xf3, 0x85, 0x07, 0x93, 0x7f, 0xef, 0x43, 0x3a, 0x40, 0x10,
	0x6e, 0xbf, 0x78, 0xbe, 0xbb, 0xf7, 0xd6, 0xc6, 0x33, 0x64, 0x80, 0xf6, 0xdd, 0xf9, 0xe6, 0xee,
	0xbf, 0x7a, 0x51, 0xbc, 0x0d, 0x7f, 0x18, 0x12, 0x52, 0x61, 0xdc, 0x1b, 0x86, 0x8c, 0x9e, 0xc3,
	0x64, 0xe5, 0x3b, 0x9f, 0x37, 0xbe, 0x17, 0xc5, 0x86, 0xb2, 0x78, 0x07, 0xea, 0x7f, 0x25, 0xb4,
	0x34, 0xd8, 0x06, 0x3b, 0xdf, 0x89, 0xdd, 0x76, 0x97, 0x0a, 0xe3, 0x5d, 0xb0, 0x16, 0x17, 0xc9,
	0x5e, 0x83, 0x26, 0xd4, 0x88, 0x54, 0x37, 0x9a, 0x11, 0xf4, 0x09, 0xb4, 0x88, 0x57, 0x24, 0xb9,
	0x88, 0x69, 0x8d, 0x5e, 0x3e, 0x2a, 0xc0, 0x6d, 0xbf, 0x6b, 0x0a, 0xf7, 0xaa, 0x3f, 0x48, 0x2b,
	0x0b, 0x66, 0x94, 0xe1, 0x23, 0xe5, 0x3f, 0xaf, 0x29, 0xce, 0x19, 0xaf, 0x79, 0x52, 0x71, 0x5c,
	0x73, 0x96, 0x9d, 0x4a, 0x7a, 0x26, 0xad, 0x9b, 0x8e, 0xc4, 0x86, 0x8f, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x60, 0x8e, 0xe6, 0x95, 0x2e, 0x02, 0x00, 0x00,
}
